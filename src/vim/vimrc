" don't sacrifice anything for vi compatibility
set nocompatible

" allow us to change unsaved buffers
set hidden

" no swapfiles
set noswapfile

" 256 colors
set t_Co=256

" vundle
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Let Vundle manage itself
Plugin 'gmarik/Vundle.vim'

" Plugins
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'tomtom/tcomment_vim'
Plugin 'bling/vim-airline'
Plugin 'tpope/vim-fugitive'
Plugin 'Raimondi/delimitMate'
Plugin 'bling/vim-bufferline'
Plugin 'kien/ctrlp.vim'
<<<{git}
Plugin 'airblade/vim-gitgutter'
>>>{git}

call vundle#end()

filetype plugin indent on

" remove auto-comment
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" encoding
set encoding=utf-8
set fileencoding=utf-8

<<<{ctags}
" recursivelly backscan ctags
set tags=./tags;
>>>{ctags}

syntax on
set number
set ruler
set laststatus=2
set scrolloff=2

" prettier completion in cmdline
set wildmenu

" Whitespace stuff
set nowrap
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set list listchars=tab:\ \ ,trail:·

" Show invisibles.
set listchars=nbsp:·,tab:▸\ ,trail:·
set list!

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" highlight linenumber of current line
set cursorline

" Tab completion
set wildmode=list:longest,list:full

" Run default test constant.
let g:RUN_DEFAULT_TEST = 0
" Run current test in focus constant.
let g:RUN_FOCUS_TEST = 1
" Run last runned test constant.
let g:RUN_LAST_TEST = 2

" closetag
let g:closetag_html_style=1

" map backspace to clear find-colouring etc and not walk backwards
map <bs> :noh<cr>

" map capital u to redo changes
nnoremap U <C-r>

" map capital w to write
command! W w

" new tab alias
cabbrev tnew tabedit

" use comma as <leader> key instead of backslash
let mapleader=","

" ctrlp
let g:ctrlp_map = '<leader>f'
nnoremap <leader>t :CtrlPTag<cr>

<<<{ctags}
" jump to definition
map <leader>g <C-]>
" go back to where you started 
map <leader>b <C-T>
>>>{ctags}

" map <leader>c to tcomment
map <leader>c :TComment<cr>

" toggle nerdtree
nmap <leader>d :NERDTreeToggle<cr>

" toggle nerdtree with the cursor positioned at the current file
nmap <leader>D :NERDTreeFind<cr>

" Show buffers
nmap Å :buffers<cr>:buffer<Space>

" Split line with enter
nmap <cr> i<cr><esc>

" Go to last buffer
nnoremap å :b#<cr>

" Adds less-esque functionallity to <space>
map <space> <c-f>

" Move between splits with ^ + standard vim bindings
nmap <C-H> <C-W>h
nmap <C-J> <C-W>j
nmap <C-K> <C-W>k
nmap <C-l> <C-W>l

" create horizontal and verical splits
nmap <leader>s :split<cr>
nmap <leader>v :vsplit<cr>

" remove buffer
nmap <leader>r :bwipeout<cr>

" x + 'å' jumps to buffer x
let c = 1
while c <= 9
  execute "nnoremap " . c . "å :" . c . "b\<cr>"
  let c += 1
endwhile

" map + to move to end of line
map + $

" map 0 to move to beginning of line (ignore tabs)
map 0 ^

" Interpret as Ruby
au BufRead,BufNewFile {Capfile,Gemfile,Rakefile,Thorfile,config.ru} set ft=ruby

" Global ignore
set wildignore+=*.o,*.obj,.git,*.rbc,*/doc/*,*/node_modules/*,*/tmp/*,*.*~,*.class

" NERDTree ignore
let NERDTreeIgnore = ['\.o$', '\.class$']

" Non blinking cursor
set guicursor+=a:blinkon0

" Syntastic settings
let g:syntastic_c_check_header = 1
let g:syntastic_c_auto_refresh_includes = 1
" let g:syntastic_c_compiler_options = '-std=g99 -pedantic -Wall'

" Disable netrw history
let g:netrw_dirhistmax = 0
let g:netrw_dirhist_cnt = 0

" directories for swp files
set directory=/tmp
set backupdir=/tmp

" hilight column 80
set colorcolumn=80

" color scheme
colorscheme byland

" Enable spell checking and column wrapping for documents
autocmd BufRead,BufNewFile *.{md,tex,txt,info},COMMIT_EDITMSG call Spell() | setlocal textwidth=80

" airline settings
let g:airline_left_sep=""
let g:airline_right_sep=""
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'V-LINE',
    \ '^V' : 'V',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '^S' : 'S',
    \ }
let g:airline_section_z = '%l:%c %p%%'

" enable bufferline in airline
let g:airline#extensions#bufferline#enabled = 1
let g:bufferline_echo = 0

<<<{git}
" gitgutter options
let g:gitgutter_map_keys = 0
nmap gk <plug>GitGutterPrevHunk
nmap gj <plug>GitGutterNextHunk
nmap gs <plug>GitGutterStageHunk
nmap gr <plug>GitGutterRevertHunk
>>>{git}

" remove default tcomment map
let g:tcommentMaps = 0

<<<{git}
function GitCommit()
    let f = "/tmp/tmpcommit"
    enew f
    read ! git diff
endfunction

nmap gc :call GitCommit()<cr>
>>>{git}

" Enable spell checking in the current buffer
function Spell(...)
    if getfperm(expand("%:p"))=~"-[x-]$"
        return
    endif
    let l:language = a:0 > 0 ? a:1 : "en"
    execute "setlocal spell! spelllang=" . l:language
    setlocal complete+=kspell
endfunction
